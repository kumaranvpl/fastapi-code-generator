name: Test

on:
  pull_request: {}

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
        pydantic-version: ["1", "2"]

    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Update pip
      run: |
        pip install --upgrade pip
    - name: Install dependencies
      run: |
        python -m pip install poetry
        poetry install
    - name: Install Pydantic V1
      if: matrix.pydantic-version == '1'
      run: |
        poetry run pip install "pydantic<2"
    - name: Install Pydantic V2
      if: matrix.pydantic-version == '2'
      run: |
        poetry run pip install "pydantic>=2,<3"
    - name: Lint
      if: matrix.os != 'windows-latest'
      run: |
        ./scripts/lint.sh
    - name: Unit Test
      if: matrix.os != 'windows-latest'
      run: |
        poetry run ./scripts/test.sh
    - name: Unit Test windows
      if: matrix.os == 'windows-latest'
      run: |
        ./scripts/poetry_test.bat

  check: # This job does nothing and is only used for the branch protection    
    needs:
      - test

    runs-on: ubuntu-latest

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1 # nosemgrep
        with:
          jobs: ${{ toJSON(needs) }}
